/* tslint:disable */
/* eslint-disable */
/**
 * Product
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateOrganizationParams
 */
export interface CreateOrganizationParams {
    /**
     * 
     * @type {any}
     * @memberof CreateOrganizationParams
     */
    'name': any;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrganizationParams
     */
    'deleted'?: boolean | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface OrganizationResponse
 */
export interface OrganizationResponse {
    /**
     * 
     * @type {number}
     * @memberof OrganizationResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationResponse
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationResponse
     */
    'deleted': boolean | null;
    /**
     * 
     * @type {string}
     * @memberof OrganizationResponse
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationResponse
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface ResponseHealthCheckHealthGetValue
 */
export interface ResponseHealthCheckHealthGetValue {
}
/**
 * 
 * @export
 * @interface UserCreateParams
 */
export interface UserCreateParams {
    /**
     * cognitoのユーザID
     * @type {string}
     * @memberof UserCreateParams
     */
    'cognito_user_id': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof UserCreateParams
     */
    'email': string;
    /**
     * 名前
     * @type {string}
     * @memberof UserCreateParams
     */
    'display_name': string;
    /**
     * 役割
     * @type {string}
     * @memberof UserCreateParams
     */
    'role': string;
    /**
     * 組織ID
     * @type {number}
     * @memberof UserCreateParams
     */
    'organization_id': number;
    /**
     * パスワード
     * @type {string}
     * @memberof UserCreateParams
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserOrganizationResponse
 */
export interface UserOrganizationResponse {
    /**
     * 
     * @type {number}
     * @memberof UserOrganizationResponse
     */
    'user_id': number;
    /**
     * 
     * @type {number}
     * @memberof UserOrganizationResponse
     */
    'organization_id': number;
    /**
     * 
     * @type {string}
     * @memberof UserOrganizationResponse
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof UserOrganizationResponse
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof UserOrganizationResponse
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'cognito_user_id': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'display_name': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponse
     */
    'deleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: ResponseHealthCheckHealthGetValue; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckHealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthCheckApi.healthCheckHealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthCheckApiFp(configuration)
    return {
        /**
         * 
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: ResponseHealthCheckHealthGetValue; }> {
            return localVarFp.healthCheckHealthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
    /**
     * 
     * @summary ヘルスチェック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public healthCheckHealthGet(options?: RawAxiosRequestConfig) {
        return HealthCheckApiFp(this.configuration).healthCheckHealthGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 組織を作成
         * @param {CreateOrganizationParams} createOrganizationParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationApiOrganizationPost: async (createOrganizationParams: CreateOrganizationParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrganizationParams' is not null or undefined
            assertParamExists('createOrganizationApiOrganizationPost', 'createOrganizationParams', createOrganizationParams)
            const localVarPath = `/api/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrganizationParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 組織の一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrganizationsApiOrganizationGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 組織の詳細取得
         * @param {number} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationApiOrganizationOrganizationIdGet: async (organizationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationApiOrganizationOrganizationIdGet', 'organizationId', organizationId)
            const localVarPath = `/api/organization/{organization_id}`
                .replace(`{${"organization_id"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 組織を作成
         * @param {CreateOrganizationParams} createOrganizationParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganizationApiOrganizationPost(createOrganizationParams: CreateOrganizationParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganizationApiOrganizationPost(createOrganizationParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationApi.createOrganizationApiOrganizationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 組織の一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrganizationsApiOrganizationGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrganizationsApiOrganizationGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationApi.getAllOrganizationsApiOrganizationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 組織の詳細取得
         * @param {number} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationApiOrganizationOrganizationIdGet(organizationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationApiOrganizationOrganizationIdGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationApi.getOrganizationApiOrganizationOrganizationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationApiFp(configuration)
    return {
        /**
         * 
         * @summary 組織を作成
         * @param {CreateOrganizationParams} createOrganizationParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationApiOrganizationPost(createOrganizationParams: CreateOrganizationParams, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationResponse> {
            return localVarFp.createOrganizationApiOrganizationPost(createOrganizationParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 組織の一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrganizationsApiOrganizationGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrganizationResponse>> {
            return localVarFp.getAllOrganizationsApiOrganizationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 組織の詳細取得
         * @param {number} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationApiOrganizationOrganizationIdGet(organizationId: number, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationResponse> {
            return localVarFp.getOrganizationApiOrganizationOrganizationIdGet(organizationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     * 
     * @summary 組織を作成
     * @param {CreateOrganizationParams} createOrganizationParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public createOrganizationApiOrganizationPost(createOrganizationParams: CreateOrganizationParams, options?: RawAxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).createOrganizationApiOrganizationPost(createOrganizationParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 組織の一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public getAllOrganizationsApiOrganizationGet(options?: RawAxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getAllOrganizationsApiOrganizationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 組織の詳細取得
     * @param {number} organizationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public getOrganizationApiOrganizationOrganizationIdGet(organizationId: number, options?: RawAxiosRequestConfig) {
        return OrganizationApiFp(this.configuration).getOrganizationApiOrganizationOrganizationIdGet(organizationId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ユーザ作成
         * @param {UserCreateParams} userCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserApiUserPost: async (userCreateParams: UserCreateParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateParams' is not null or undefined
            assertParamExists('createUserApiUserPost', 'userCreateParams', userCreateParams)
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザ削除
         * @param {string} cognitoUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserApiUserCognitoUserIdDelete: async (cognitoUserId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cognitoUserId' is not null or undefined
            assertParamExists('deleteUserApiUserCognitoUserIdDelete', 'cognitoUserId', cognitoUserId)
            const localVarPath = `/api/user/{cognito_user_id}`
                .replace(`{${"cognito_user_id"}}`, encodeURIComponent(String(cognitoUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザ一覧取得
         * @param {number | null} [organizationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersApiUserGet: async (organizationId?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ユーザ作成
         * @param {UserCreateParams} userCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserApiUserPost(userCreateParams: UserCreateParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserApiUserPost(userCreateParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.createUserApiUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ユーザ削除
         * @param {string} cognitoUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserApiUserCognitoUserIdDelete(cognitoUserId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserApiUserCognitoUserIdDelete(cognitoUserId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.deleteUserApiUserCognitoUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ユーザ一覧取得
         * @param {number | null} [organizationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersApiUserGet(organizationId?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersApiUserGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUsersApiUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary ユーザ作成
         * @param {UserCreateParams} userCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserApiUserPost(userCreateParams: UserCreateParams, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.createUserApiUserPost(userCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザ削除
         * @param {string} cognitoUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserApiUserCognitoUserIdDelete(cognitoUserId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUserApiUserCognitoUserIdDelete(cognitoUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザ一覧取得
         * @param {number | null} [organizationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersApiUserGet(organizationId?: number | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>> {
            return localVarFp.getUsersApiUserGet(organizationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary ユーザ作成
     * @param {UserCreateParams} userCreateParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUserApiUserPost(userCreateParams: UserCreateParams, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).createUserApiUserPost(userCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザ削除
     * @param {string} cognitoUserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUserApiUserCognitoUserIdDelete(cognitoUserId: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUserApiUserCognitoUserIdDelete(cognitoUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザ一覧取得
     * @param {number | null} [organizationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsersApiUserGet(organizationId?: number | null, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUsersApiUserGet(organizationId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserOrganizationApi - axios parameter creator
 * @export
 */
export const UserOrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ユーザ-組織情報一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrganizationsApiUserOrganizationGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user_organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthorizationCodeBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthorizationCodeBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserOrganizationApi - functional programming interface
 * @export
 */
export const UserOrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserOrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ユーザ-組織情報一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserOrganizationsApiUserOrganizationGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserOrganizationResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserOrganizationsApiUserOrganizationGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserOrganizationApi.getUserOrganizationsApiUserOrganizationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserOrganizationApi - factory interface
 * @export
 */
export const UserOrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserOrganizationApiFp(configuration)
    return {
        /**
         * 
         * @summary ユーザ-組織情報一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrganizationsApiUserOrganizationGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserOrganizationResponse>> {
            return localVarFp.getUserOrganizationsApiUserOrganizationGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserOrganizationApi - object-oriented interface
 * @export
 * @class UserOrganizationApi
 * @extends {BaseAPI}
 */
export class UserOrganizationApi extends BaseAPI {
    /**
     * 
     * @summary ユーザ-組織情報一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserOrganizationApi
     */
    public getUserOrganizationsApiUserOrganizationGet(options?: RawAxiosRequestConfig) {
        return UserOrganizationApiFp(this.configuration).getUserOrganizationsApiUserOrganizationGet(options).then((request) => request(this.axios, this.basePath));
    }
}



